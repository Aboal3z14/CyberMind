// level4.js
document.addEventListener("DOMContentLoaded", () => {
  // Game state
  let level4Score = 0;
  let scenariosRemaining = 3;
  let currentDifficulty = "easy";
  // üß† Emotion tracking
  let emotionCounts = {
    happy: 0,
    sad: 0,
    angry: 0,
    surprised: 0,
    neutral: 0,
    fearful: 0,
    disgusted: 0
  };

  let dominantEmotion = "neutral"; // default

  // Track used scenarios to avoid repetition
  let usedScenarios = {
    easy: [],
    medium: [],
    hard: []
  };
  
  // DOM elements
  const scoreDisplay = document.getElementById("level4-score");
  const scenariosDisplay = document.getElementById("scenarios-remaining");
  const scenarioContainer = document.getElementById("scenario-container");
  const feedbackEl = document.getElementById("level4-feedback");
  const cyberBuddy = document.getElementById("cyberbuddy");
  const nextLevelBtn = document.getElementById("go-to-level5");
  
  // Social engineering scenarios by difficulty
  const scenarios = {
    easy: [
      {
        id: "easy-1",
        title: "ŸÖŸÉÿßŸÑŸÖÿ© Ÿáÿßÿ™ŸÅŸäÿ© ŸÖÿ¥ÿ®ŸàŸáÿ©",
        description: "ÿßÿ™ÿµŸÑ ÿ®ŸÉ ÿ¥ÿÆÿµ ŸäÿØÿπŸä ÿ£ŸÜŸá ŸÖŸÜ ÿßŸÑÿ®ŸÜŸÉ ŸàŸäÿ∑ŸÑÿ® ŸÖÿπŸÑŸàŸÖÿßÿ™ŸÉ ÿßŸÑÿ¥ÿÆÿµŸäÿ© ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ŸÖŸÉÿßŸÅÿ£ÿ© ÿÆÿßÿµÿ©. ŸäŸÇŸàŸÑ ÿ•ŸÜ ÿßŸÑÿπÿ±ÿ∂ ÿ≥ŸäŸÜÿ™ŸáŸä ÿÆŸÑÿßŸÑ ÿ≥ÿßÿπÿ©.",
        options: [
          { text: "ÿ£ÿπÿ∑ŸäŸá ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ŸÑÿ£ŸÜŸá Ÿäÿπÿ±ŸÅ ÿßÿ≥ŸÖŸä ŸàŸäÿπÿ±ŸÅ ÿ£ŸÜŸÜŸä ÿπŸÖŸäŸÑ ŸÅŸä ÿßŸÑÿ®ŸÜŸÉ", correct: false },
          { text: "ÿ£ÿ∑ŸÑÿ® ÿ±ŸÇŸÖŸá Ÿàÿ£ÿ™ŸàÿßÿµŸÑ ŸÖÿπ ÿßŸÑÿ®ŸÜŸÉ ŸÖÿ®ÿßÿ¥ÿ±ÿ© ŸÑŸÑÿ™ÿ£ŸÉÿØ", correct: true },
          { text: "ÿ£ŸÇÿ∑ÿπ ÿßŸÑŸÖŸÉÿßŸÑŸÖÿ© Ÿàÿ£ÿ≠ÿ∏ÿ± ÿßŸÑÿ±ŸÇŸÖ", correct: true }
        ],
        hint: "ÿßŸÑÿ®ŸÜŸàŸÉ ŸÑÿß ÿ™ÿ∑ŸÑÿ® ŸÖÿπŸÑŸàŸÖÿßÿ™ŸÉ ÿßŸÑÿ¥ÿÆÿµŸäÿ© ÿπÿ®ÿ± ÿßŸÑŸáÿßÿ™ŸÅ. ÿØÿßÿ¶ŸÖÿßŸã ÿ™ŸàÿßÿµŸÑ ŸÖÿπ ÿßŸÑÿ®ŸÜŸÉ ŸÖÿ®ÿßÿ¥ÿ±ÿ© ÿπÿ®ÿ± ŸÇŸÜŸàÿßÿ™ŸáŸÖ ÿßŸÑÿ±ÿ≥ŸÖŸäÿ©."
      },
      {
        id: "easy-2",
        title: "ÿ®ÿ±ŸäÿØ ÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä ÿπÿßÿ¨ŸÑ",
        description: "ŸàÿµŸÑŸÉ ÿ•ŸäŸÖŸäŸÑ ŸÖŸÜ \"ŸÖÿØŸäÿ±ŸÉ\" Ÿäÿ∑ŸÑÿ® ŸÖŸÜŸÉ ÿ™ÿ≠ŸàŸäŸÑ ŸÖÿ®ŸÑÿ∫ ÿπÿßÿ¨ŸÑ ÿ•ŸÑŸâ ÿ≠ÿ≥ÿßÿ® ÿ¨ÿØŸäÿØ ÿ®ÿ≥ÿ®ÿ® \"ÿ∏ÿ±ŸàŸÅ ÿ∑ÿßÿ±ÿ¶ÿ©\".",
        options: [
          { text: "ÿ£ŸÜŸÅÿ∞ ÿßŸÑÿ∑ŸÑÿ® ŸÅŸàÿ±ÿßŸã ŸÑÿ£ŸÜ ÿßŸÑŸÖÿØŸäÿ± Ÿäÿ®ÿØŸà ŸÅŸä ÿ≠ÿßŸÑÿ© ÿ∑ÿßÿ±ÿ¶ÿ©", correct: false },
          { text: "ÿ£ÿ™ÿµŸÑ ÿ®ÿßŸÑŸÖÿØŸäÿ± ŸÖÿ®ÿßÿ¥ÿ±ÿ© ÿπŸÑŸâ ÿ±ŸÇŸÖŸá ÿßŸÑŸÖÿπÿ±ŸàŸÅ ŸÑŸÑÿ™ÿ£ŸÉÿØ", correct: true },
          { text: "ÿ£ÿ®ŸÑÿ∫ ŸÇÿ≥ŸÖ ÿ™ŸÉŸÜŸàŸÑŸàÿ¨Ÿäÿß ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ÿπŸÜ ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑŸÖÿ¥ÿ®ŸàŸá", correct: true }
        ],
        hint: "ÿßŸÑŸÖŸáÿßÿ¨ŸÖŸàŸÜ ÿ∫ÿßŸÑÿ®ÿßŸã ŸÖÿß ŸäÿÆŸÑŸÇŸàŸÜ ÿ≠ÿßŸÑÿ© ŸÖŸÜ ÿßŸÑÿ•ŸÑÿ≠ÿßÿπ ŸÑÿØŸÅÿπŸÉ ŸÑÿßÿ™ÿÆÿßÿ∞ ŸÇÿ±ÿßÿ± ÿÆÿßÿ∑ÿ¶. ÿØÿßÿ¶ŸÖÿßŸã ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ ÿ∫Ÿäÿ± ÿßŸÑÿπÿßÿØŸäÿ©."
      }
    ],
    medium: [
      {
        id: "medium-1",
        title: "ÿπÿ±ÿ∂ ÿπŸÖŸÑ ŸÖÿ∫ÿ±Ÿç",
        description: "ÿπÿ±ÿ∂ ÿπŸÖŸÑ ŸÖŸÜ ÿ¥ÿ±ŸÉÿ© ÿ∫Ÿäÿ± ŸÖÿπÿ±Ÿàÿπÿ© ÿ®ÿ±ÿßÿ™ÿ® ŸÖÿ±ÿ™ŸÅÿπ ÿ¨ÿØÿßŸãÿå Ÿäÿ∑ŸÑÿ®ŸàŸÜ ŸÖŸÜŸÉ ÿØŸÅÿπ ŸÖÿ®ŸÑÿ∫ ŸÖŸÇÿØŸÖ \"ŸÉÿ∂ŸÖÿßŸÜ\" ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑŸàÿ∏ŸäŸÅÿ©.",
        options: [
          { text: "ÿ£ÿØŸÅÿπ ÿßŸÑŸÖÿ®ŸÑÿ∫ ŸÑÿ£ŸÜ ÿßŸÑÿ±ÿßÿ™ÿ® ŸÖÿ±ÿ™ŸÅÿπ ŸàŸäÿ∫ÿ∑Ÿä Ÿáÿ∞ÿß ÿßŸÑŸÖÿ®ŸÑÿ∫", correct: false },
          { text: "ÿ£ÿ®ÿ≠ÿ´ ÿπŸÜ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿπŸÜ ÿßŸÑÿ¥ÿ±ŸÉÿ© Ÿàÿ£ÿ™ÿµŸÑ ÿ®ŸáŸÖ ÿπÿ®ÿ± ŸÇŸÜŸàÿßÿ™ ÿ±ÿ≥ŸÖŸäÿ©", correct: true },
          { text: "ÿ£ÿ±ŸÅÿ∂ ÿßŸÑÿπÿ±ÿ∂ ŸÑÿ£ŸÜ ÿßŸÑÿ¥ÿ±ŸÉÿßÿ™ ÿßŸÑÿ¥ÿ±ÿπŸäÿ© ŸÑÿß ÿ™ÿ∑ŸÑÿ® ÿ£ŸÖŸàÿßŸÑÿßŸã ŸÖŸÇÿØŸÖÿ©", correct: true }
        ],
        hint: "ÿßŸÑÿπÿ±Ÿàÿ∂ ÿßŸÑÿ™Ÿä ÿ™ÿ®ÿØŸà ÿ¨ŸäÿØÿ© ÿ¨ÿØÿßŸã ŸÑÿØÿ±ÿ¨ÿ© Ÿäÿµÿπÿ® ÿ™ÿµÿØŸäŸÇŸáÿß ÿ∫ÿßŸÑÿ®ÿßŸã ŸÖÿß ÿ™ŸÉŸàŸÜ ÿßÿ≠ÿ™ŸäÿßŸÑ. ÿßŸÑÿ¥ÿ±ŸÉÿßÿ™ ÿßŸÑÿ¥ÿ±ÿπŸäÿ© ŸÑÿß ÿ™ÿ∑ŸÑÿ® ÿ£ŸÖŸàÿßŸÑÿßŸã ŸÖŸÇÿØŸÖÿ© ŸÖŸÜ ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ."
      },
      {
        id: "medium-2",
        title: "ŸÖÿ≥ÿ≠ ÿ∂Ÿàÿ¶Ÿä ŸÑŸÑŸàÿ¨Ÿá",
        description: "ÿ™ÿ∑ÿ®ŸäŸÇ ÿπŸÑŸâ Ÿáÿßÿ™ŸÅŸÉ ŸäÿπÿØŸÉ ÿ®ÿ™ÿ≠ŸàŸäŸÑ ÿµŸàÿ±ÿ™ŸÉ ÿ•ŸÑŸâ ÿ±ÿ≥ŸÖ ŸÉÿßÿ±ÿ™ŸàŸÜŸä ŸÖÿ≠ÿ™ÿ±ŸÅÿå ŸÑŸÉŸÜŸá Ÿäÿ∑ŸÑÿ® ÿµŸÑÿßÿ≠Ÿäÿ© ÿßŸÑŸàÿµŸàŸÑ ÿ•ŸÑŸâ ÿßŸÑŸÉÿßŸÖŸäÿ±ÿß Ÿàÿ¨Ÿáÿßÿ™ ÿßÿ™ÿµÿßŸÑŸÉ.",
        options: [
          { text: "ÿ£ŸÖŸÜÿ≠Ÿá ÿßŸÑÿµŸÑÿßÿ≠Ÿäÿßÿ™ ŸÑÿ£ŸÜŸá ÿ™ÿ∑ÿ®ŸäŸÇ ŸÖÿ≥ŸÑŸä Ÿàÿ∫Ÿäÿ± ÿ∂ÿßÿ±", correct: false },
          { text: "ÿ£ÿ±ŸÅÿ∂ ŸÖŸÜÿ≠ ÿßŸÑÿµŸÑÿßÿ≠Ÿäÿßÿ™ Ÿàÿ£ÿ®ÿ≠ÿ´ ÿπŸÜ ÿ™ÿ∑ÿ®ŸäŸÇ ÿ®ÿØŸäŸÑ ŸÖÿπ ÿ™ŸÇŸäŸäŸÖÿßÿ™ ÿ¨ŸäÿØÿ©", correct: true },
          { text: "ÿ£ŸÇÿ®ŸÑ ÿßŸÑÿµŸÑÿßÿ≠Ÿäÿßÿ™ ŸàŸÑŸÉŸÜ ÿ£ŸÖŸÜÿπ ÿßŸÑŸàÿµŸàŸÑ ÿ•ŸÑŸâ ÿ¨Ÿáÿßÿ™ ÿßŸÑÿßÿ™ÿµÿßŸÑ", correct: false }
        ],
        hint: "ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ ÿßŸÑÿ™Ÿä ÿ™ÿ∑ŸÑÿ® ÿµŸÑÿßÿ≠Ÿäÿßÿ™ ÿ£ŸÉÿ´ÿ± ŸÖŸÖÿß ÿ™ÿ≠ÿ™ÿßÿ¨Ÿá ŸÑŸÖŸáŸÖÿ™Ÿáÿß ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ© ŸÇÿØ ÿ™ŸÉŸàŸÜ ÿÆÿ∑Ÿäÿ±ÿ©. ÿßŸÇÿ±ÿ£ ÿßŸÑÿ™ŸÇŸäŸäŸÖÿßÿ™ Ÿàÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑŸÖÿ∑Ÿàÿ± ŸÇÿ®ŸÑ ÿ™ÿ´ÿ®Ÿäÿ™ ÿ£Ÿä ÿ™ÿ∑ÿ®ŸäŸÇ."
      }
    ],
    hard: [
      {
        id: "hard-1",
        title: "ÿ™ÿ≥ÿ±Ÿäÿ® ŸÖÿπŸÑŸàŸÖÿßÿ™Ÿä",
        description: "ÿ¥ÿÆÿµ Ÿäÿ™ÿµŸÑ ÿ®ŸÉ ŸàŸäÿπÿ±ŸÅ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ¥ÿÆÿµŸäÿ© ÿØŸÇŸäŸÇÿ© ÿπŸÜŸÉ (ÿπŸÜŸàÿßŸÜŸÉÿå ÿ™ÿßÿ±ŸäÿÆ ŸÖŸäŸÑÿßÿØŸÉ)ÿå ŸàŸäÿ∑ŸÑÿ® ÿßŸÑÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ®ÿπÿ∂ ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ£ÿÆÿ±Ÿâ \"ŸÑÿ≠ŸÖÿßŸäÿ™ŸÉ\".",
        options: [
          { text: "ÿ£ÿ™ÿπÿßŸàŸÜ ŸÖÿπŸá ŸÑÿ£ŸÜŸá Ÿäÿπÿ±ŸÅ ŸÖÿπŸÑŸàŸÖÿßÿ™Ÿä already", correct: false },
          { text: "ÿ£ŸÇÿ∑ÿπ ÿßŸÑŸÖŸÉÿßŸÑŸÖÿ© Ÿàÿ£ÿ®ŸÑÿ∫ ÿßŸÑÿ≥ŸÑÿ∑ÿßÿ™ ÿßŸÑŸÖÿÆÿ™ÿµÿ©", correct: true },
          { text: "ÿ£ÿ∑ŸÑÿ® ŸÖŸÜŸá ŸÖÿπŸÑŸàŸÖÿßÿ™ ŸÑŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ŸáŸàŸäÿ™Ÿá ŸÇÿ®ŸÑ ÿ£Ÿä ÿ≠ÿØŸäÿ´", correct: true }
        ],
        hint: "ÿßŸÑŸÖÿ≠ÿ™ÿßŸÑŸàŸÜ Ÿäÿ¨ŸÖÿπŸàŸÜ ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑŸÖÿ™ÿßÿ≠ÿ© publicly ŸÑŸäŸÉÿ≥ÿ®Ÿàÿß ÿ´ŸÇÿ™ŸÉ. ŸÑÿß ÿ™ÿπÿ∑ ÿ£Ÿä ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ•ÿ∂ÿßŸÅŸäÿ© ÿ≠ÿ™Ÿâ ŸÑŸà ŸÉÿßŸÜŸàÿß Ÿäÿπÿ±ŸÅŸàŸÜ ÿ®ÿπÿ∂ ŸÖÿπŸÑŸàŸÖÿßÿ™ŸÉ."
      }
    ]
  };

  // -------------------------------
  // üß† EMOTION DETECTION FUNCTIONS
  // -------------------------------
  async function detectEmotion() {
    if (!window.faceapi || !window.videoElement) return;

    const detections = await faceapi
      .detectSingleFace(window.videoElement, new faceapi.TinyFaceDetectorOptions())
      .withFaceExpressions();

    if (detections && detections.expressions) {
      // find top expression
      let bestEmotion = "neutral";
      let bestValue = 0;
      for (let [emotion, value] of Object.entries(detections.expressions)) {
        if (value > bestValue) {
          bestEmotion = emotion;
          bestValue = value;
        }
      }

      // increment counter
      if (emotionCounts[bestEmotion] !== undefined) {
        emotionCounts[bestEmotion]++;
      }

      // update dominantEmotion (the one with highest total count so far)
      dominantEmotion = Object.entries(emotionCounts).reduce((a, b) =>
        b[1] > a[1] ? b : a
      )[0];
    }
  }

  // call detectEmotion repeatedly (every 2s for example)
  setInterval(detectEmotion, 3000);

  // -------------------------------
  // ‚öñÔ∏è Adjust difficulty based on dominant emotion
  // -------------------------------
  function adjustDifficulty() {
    // Map emotions -> difficulty
    // tweak mapping as you prefer
    if (dominantEmotion === "surprised") {
      currentDifficulty = "hard";
    } else if (dominantEmotion === "happy" || dominantEmotion === "neutral") {
      currentDifficulty = "medium";
    } else { // sad, angry, fearful, disgusted, etc.
      currentDifficulty = "easy";
    }
  }

  // -------------------------------
  // üìù FUNCTIONS
  // ------------------------------- 
    // Display scenario in the UI
  function displayScenario(scenario) {
    scenarioContainer.innerHTML = `
      <div class="scenario-title">${scenario.title}</div>
      <div class="scenario-description">${scenario.description}</div>
      <div class="scenario-options">
        ${scenario.options.map((option, index) => 
          `<button class="option-btn" data-correct="${option.correct}" data-index="${index}">${option.text}</button>`
        ).join('')}
      </div>
    `;
    
    // Add event listeners to option buttons
    const optionButtons = scenarioContainer.querySelectorAll('.option-btn');
    optionButtons.forEach(btn => {
      btn.addEventListener('click', (e) => {
        handleAnswer(e.target.dataset.correct === 'true', scenario.hint);
        
        // Visual feedback
        optionButtons.forEach(b => {
          b.disabled = true;
          if (b.dataset.correct === 'true') {
            b.classList.add('correct');
          } else {
            b.classList.add('incorrect');
          }
        });
      });
    });
    
    feedbackEl.textContent = '';
  }


  function loadNextScenario() {
    if (scenariosRemaining <= 0) {
      endLevel();
      return;
    }
    
    const availableScenarios = scenarios[currentDifficulty].filter(
      scenario => !usedScenarios[currentDifficulty].includes(scenario.id)
    );
    
    // If no scenarios left in current difficulty, try other difficulties
    if (availableScenarios.length === 0) {
      const difficulties = ["easy", "medium", "hard"];
      for (let diff of difficulties) {
        if (diff !== currentDifficulty && scenarios[diff].length > 0) {
          const otherAvailable = scenarios[diff].filter(
            scenario => !usedScenarios[diff].includes(scenario.id)
          );
          if (otherAvailable.length > 0) {
            currentDifficulty = diff;
            break;
          }
        }
      }
    }
    
    const finalAvailableScenarios = scenarios[currentDifficulty].filter(
      scenario => !usedScenarios[currentDifficulty].includes(scenario.id)
    );
    
    if (finalAvailableScenarios.length === 0) {
      endLevel();
      return;
    }
    
    const randomIndex = Math.floor(Math.random() * finalAvailableScenarios.length);
    const scenario = finalAvailableScenarios[randomIndex];
    
    // Mark this scenario as used
    usedScenarios[currentDifficulty].push(scenario.id);
    
    // Display the scenario
    displayScenario(scenario);
    
    scenariosRemaining--;
    updateDisplays();
  }

  function updateDisplays() {
    scoreDisplay.textContent = level4Score;
    scenariosDisplay.textContent = scenariosRemaining;
  }

  // Initialize level 4
  function initLevel4() {
    level4Score = 0;
    scenariosRemaining = 3;
    // Reset used scenarios
    usedScenarios = {
      easy: [],
      medium: [],
      hard: []
    };
    updateDisplays();
    
    // Adjust difficulty based on emotion
    adjustDifficulty();
    
    // Load first scenario
    loadNextScenario();
    
    // Setup CyberBuddy initial message
    if (cyberBuddy) {
      cyberBuddy.innerHTML = `ü§ñ <strong>ÿ≥ÿßŸäÿ®ÿ± ÿ®ŸàÿØŸä</strong><br>ÿ¥ÿπŸàÿ±ŸÉ ÿßŸÑŸäŸàŸÖ: <span class="emotion-badge">${dominantEmotion}</span>. ŸáŸÜÿ®ÿØÿ£ ÿ®ŸÖÿ≥ÿ™ŸàŸâ ${currentDifficulty === 'easy' ? 'ÿ≥ŸáŸÑ' : currentDifficulty === 'medium' ? 'ŸÖÿ™Ÿàÿ≥ÿ∑' : 'ÿµÿπÿ®'} ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ ŸÖÿ≤ÿßÿ¨ŸÉ.`;
    }
  }

  // Handle user's answer
  function handleAnswer(isCorrect, hint) {
    if (isCorrect) {
      level4Score += 10;
      feedbackEl.textContent = "‚úÖ ÿ•ÿ¨ÿßÿ®ÿ© ÿµÿ≠Ÿäÿ≠ÿ©! ÿ£ÿ≠ÿ≥ŸÜÿ™!";
      feedbackEl.style.color = "lightgreen";
      
      if (cyberBuddy) {
        cyberBuddy.innerHTML = `ü§ñ <strong>ÿ≥ÿßŸäÿ®ÿ± ÿ®ŸàÿØŸä</strong><br>ÿ£ÿ≠ÿ≥ŸÜÿ™! ŸÉÿØÿ© ÿ®ÿ™ŸÉŸàŸÜ ÿπÿßÿ±ŸÅ ÿ™ÿ™ÿπÿßŸÖŸÑ ŸÖÿπ ÿßŸÑŸÖŸàŸÇŸÅ!`;
      }
    } else {
      feedbackEl.innerHTML = `‚ùå ÿ•ÿ¨ÿßÿ®ÿ© ÿÆÿßÿ∑ÿ¶ÿ©!<br>${hint}`;
      feedbackEl.style.color = "lightpink";
      
      if (cyberBuddy) {
        cyberBuddy.innerHTML = `ü§ñ <strong>ÿ≥ÿßŸäÿ®ÿ± ÿ®ŸàÿØŸä</strong><br>ŸÖÿ¥ŸÉŸÑÿ©! ÿßŸÑŸÖÿ±ÿ© ÿßŸÑÿ¨ÿßŸäÿ© ÿÆÿØ ÿ®ÿßŸÑŸÉ ŸÖŸÜ ${hint}`;
      }
    }
    
    updateDisplays();
    
    // Load next scenario after a delay
    setTimeout(() => {
      loadNextScenario();
    }, 3000);
  }

  // End the level
  function endLevel() {
    document.getElementById("level4-screen").classList.add("hidden");
    document.getElementById("level4-congrats-screen").classList.remove("hidden");
    
    // Update CyberBuddy message
    if (cyberBuddy) cyberBuddy.innerHTML = `ü§ñ <strong>ÿ≥ÿßŸäÿ®ÿ± ÿ®ŸàÿØŸä</strong><br> ŸÖÿ®ÿ±ŸàŸÉ ÿÆŸÑÿµÿ™ ÿßŸÑŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿ±ÿßÿ®ÿπ! üéâ`;
      getCyberBuddyResponse(`ÿßŸÑŸÑÿßÿπÿ® ÿÆŸÑÿµ ÿßŸÑŸÖÿ±ÿ≠ŸÑÿ© ÿßŸÑÿ±ÿßÿ®ÿπÿ© ŸàÿπÿØŸâ ÿßŸÑŸÖÿ≥ÿ™ŸàŸâ. ÿ¥ÿπŸàÿ±Ÿá ÿßŸÑÿ∫ÿßŸÑÿ® ŸÉÿßŸÜ ${dominantEmotion}. ÿßÿØŸäŸÑŸá ÿ™ŸáŸÜÿ¶ÿ© ÿ®ÿßŸÑŸÑŸáÿ¨ÿ© ÿßŸÑŸÖÿµÿ±Ÿäÿ©`)
        .then(response => {
          if (cyberBuddy) cyberBuddy.innerHTML = `ü§ñ <strong>ÿ≥ÿßŸäÿ®ÿ± ÿ®ŸàÿØŸä</strong><br>${response}`;
        });

        
    const currentUser = localStorage.getItem("currentUser");
    completeLevel(currentUser, "level4", "üó£Ô∏è Human Firewall");
    
  }

  // Next level button
  if (nextLevelBtn) {
    nextLevelBtn.addEventListener("click", () => {
      document.getElementById("level4-congrats-screen").classList.add("hidden");
    });
  }

  // Initialize level 4 when the screen is shown
  const level4Screen = document.getElementById("level4-screen");
  if (level4Screen) {
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (!mutation.target.classList.contains('hidden')) {
          initLevel4();
        }
      });
    });
    
    observer.observe(level4Screen, { 
      attributes: true, 
      attributeFilter: ['class'] 
    });
  }
});
